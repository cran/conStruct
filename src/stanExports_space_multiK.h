// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_space_multiK_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'space_multiK', line 46, column 1 to column 27)",
                                                      " (in 'space_multiK', line 47, column 1 to column 27)",
                                                      " (in 'space_multiK', line 48, column 1 to column 37)",
                                                      " (in 'space_multiK', line 49, column 1 to column 25)",
                                                      " (in 'space_multiK', line 50, column 3 to column 29)",
                                                      " (in 'space_multiK', line 51, column 1 to column 26)",
                                                      " (in 'space_multiK', line 52, column 1 to column 21)",
                                                      " (in 'space_multiK', line 55, column 1 to column 20)",
                                                      " (in 'space_multiK', line 56, column 1 to column 19)",
                                                      " (in 'space_multiK', line 57, column 1 to column 30)",
                                                      " (in 'space_multiK', line 58, column 1 to column 95)",
                                                      " (in 'space_multiK', line 61, column 1 to column 22)",
                                                      " (in 'space_multiK', line 62, column 1 to column 22)",
                                                      " (in 'space_multiK', line 63, column 1 to column 23)",
                                                      " (in 'space_multiK', line 64, column 1 to column 22)",
                                                      " (in 'space_multiK', line 65, column 1 to column 19)",
                                                      " (in 'space_multiK', line 66, column 1 to column 34)",
                                                      " (in 'space_multiK', line 67, column 15 to column 43)",
                                                      " (in 'space_multiK', line 67, column 1 to column 43)",
                                                      " (in 'space_multiK', line 68, column 1 to column 29)",
                                                      " (in 'space_multiK', line 32, column 1 to column 16)",
                                                      " (in 'space_multiK', line 33, column 1 to column 16)",
                                                      " (in 'space_multiK', line 34, column 1 to column 18)",
                                                      " (in 'space_multiK', line 35, column 8 to column 9)",
                                                      " (in 'space_multiK', line 35, column 10 to column 11)",
                                                      " (in 'space_multiK', line 35, column 1 to column 20)",
                                                      " (in 'space_multiK', line 36, column 8 to column 9)",
                                                      " (in 'space_multiK', line 36, column 11 to column 12)",
                                                      " (in 'space_multiK', line 36, column 1 to column 22)",
                                                      " (in 'space_multiK', line 37, column 1 to column 19)",
                                                      " (in 'space_multiK', line 40, column 8 to column 9)",
                                                      " (in 'space_multiK', line 40, column 10 to column 11)",
                                                      " (in 'space_multiK', line 40, column 1 to column 21)",
                                                      " (in 'space_multiK', line 41, column 8 to column 9)",
                                                      " (in 'space_multiK', line 41, column 1 to column 21)",
                                                      " (in 'space_multiK', line 42, column 1 to column 23)",
                                                      " (in 'space_multiK', line 43, column 1 to column 31)",
                                                      " (in 'space_multiK', line 46, column 17 to column 18)",
                                                      " (in 'space_multiK', line 47, column 17 to column 18)",
                                                      " (in 'space_multiK', line 48, column 26 to column 27)",
                                                      " (in 'space_multiK', line 49, column 18 to column 19)",
                                                      " (in 'space_multiK', line 50, column 19 to column 20)",
                                                      " (in 'space_multiK', line 51, column 7 to column 8)",
                                                      " (in 'space_multiK', line 51, column 18 to column 19)",
                                                      " (in 'space_multiK', line 55, column 8 to column 9)",
                                                      " (in 'space_multiK', line 55, column 10 to column 11)",
                                                      " (in 'space_multiK', line 56, column 8 to column 9)",
                                                      " (in 'space_multiK', line 56, column 10 to column 11)",
                                                      " (in 'space_multiK', line 3, column 9 to column 10)",
                                                      " (in 'space_multiK', line 3, column 11 to column 12)",
                                                      " (in 'space_multiK', line 3, column 2 to column 18)",
                                                      " (in 'space_multiK', line 6, column 4 to column 49)",
                                                      " (in 'space_multiK', line 7, column 4 to column 24)",
                                                      " (in 'space_multiK', line 5, column 16 to line 8, column 4)",
                                                      " (in 'space_multiK', line 5, column 3 to line 8, column 4)",
                                                      " (in 'space_multiK', line 4, column 15 to line 9, column 3)",
                                                      " (in 'space_multiK', line 4, column 2 to line 9, column 3)",
                                                      " (in 'space_multiK', line 10, column 2 to column 13)",
                                                      " (in 'space_multiK', line 2, column 67 to line 11, column 2)",
                                                      " (in 'space_multiK', line 13, column 9 to column 10)",
                                                      " (in 'space_multiK', line 13, column 11 to column 12)",
                                                      " (in 'space_multiK', line 13, column 2 to column 21)",
                                                      " (in 'space_multiK', line 14, column 9 to column 10)",
                                                      " (in 'space_multiK', line 14, column 11 to column 12)",
                                                      " (in 'space_multiK', line 14, column 2 to column 22)",
                                                      " (in 'space_multiK', line 15, column 2 to column 29)",
                                                      " (in 'space_multiK', line 16, column 2 to column 32)",
                                                      " (in 'space_multiK', line 18, column 3 to column 103)",
                                                      " (in 'space_multiK', line 17, column 15 to line 19, column 3)",
                                                      " (in 'space_multiK', line 17, column 2 to line 19, column 3)",
                                                      " (in 'space_multiK', line 20, column 2 to column 28)",
                                                      " (in 'space_multiK', line 21, column 2 to column 16)",
                                                      " (in 'space_multiK', line 12, column 155 to line 22, column 2)",
                                                      " (in 'space_multiK', line 24, column 9 to column 10)",
                                                      " (in 'space_multiK', line 24, column 11 to column 12)",
                                                      " (in 'space_multiK', line 24, column 2 to column 20)",
                                                      " (in 'space_multiK', line 26, column 3 to column 34)",
                                                      " (in 'space_multiK', line 25, column 15 to line 27, column 3)",
                                                      " (in 'space_multiK', line 25, column 2 to line 27, column 3)",
                                                      " (in 'space_multiK', line 28, column 2 to column 15)",
                                                      " (in 'space_multiK', line 23, column 53 to line 29, column 2)"};
template <typename T1__, typename T2__, typename T3__, typename T4__,
typename T5__>
Eigen::Matrix<stan::promote_args_t<T1__, T2__, T3__, stan::value_type_t<T4__>,
T5__>, -1, -1>
spCov(const int& N, const T1__& a0, const T2__& aD, const T3__& a2,
      const T4__& D_arg__, const T5__& phi, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__,
          T2__,
          T3__,
          stan::value_type_t<T4__>,
          T5__>;
  const auto& D = to_ref(D_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 49;
    validate_non_negative_index("cov", "N", N);
    current_statement__ = 50;
    validate_non_negative_index("cov", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> cov;
    cov = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(cov, DUMMY_VAR__);
    
    current_statement__ = 57;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 55;
      for (int j = i; j <= N; ++j) {
        current_statement__ = 52;
        assign(cov,
          cons_list(index_uni(i), cons_list(index_uni(j), nil_index_list())),
          ((a0 *
             stan::math::exp(
               -pow(
                  (aD *
                    rvalue(D,
                      cons_list(index_uni(i),
                        cons_list(index_uni(j), nil_index_list())), "D")),
                  a2))) + phi), "assigning variable cov");
        current_statement__ = 53;
        assign(cov,
          cons_list(index_uni(j), cons_list(index_uni(i), nil_index_list())),
          rvalue(cov,
            cons_list(index_uni(i),
              cons_list(index_uni(j), nil_index_list())), "cov"),
          "assigning variable cov");}}
    current_statement__ = 58;
    return cov;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct spCov_functor__ {
template <typename T1__, typename T2__, typename T3__, typename T4__,
typename T5__>
Eigen::Matrix<stan::promote_args_t<T1__, T2__, T3__, stan::value_type_t<T4__>,
T5__>, -1, -1>
operator()(const int& N, const T1__& a0, const T2__& aD, const T3__& a2,
           const T4__& D, const T5__& phi, std::ostream* pstream__)  const 
{
return spCov(N, a0, aD, a2, D, phi, pstream__);
}
};
template <typename T2__, typename T3__, typename T4__, typename T5__,
typename T6__, typename T7__, typename T8__, typename T9__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::value_type_t<T5__>,
stan::value_type_t<T6__>, stan::promote_args_t<stan::value_type_t<T7__>,
stan::value_type_t<T8__>,
T9__>>, -1, -1>
admixed_covariance(const int& N, const int& K, const T2__& alpha0_arg__,
                   const T3__& alphaD_arg__, const T4__& alpha2_arg__,
                   const T5__& geoDist_arg__, const T6__& w_mat_arg__,
                   const T7__& nugget_arg__, const T8__& phi_arg__,
                   const T9__& gamma, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          stan::value_type_t<T4__>,
          stan::value_type_t<T5__>,
          stan::value_type_t<T6__>, stan::promote_args_t<stan::value_type_t<T7__>,
          stan::value_type_t<T8__>,
          T9__>>;
  const auto& alpha0 = to_ref(alpha0_arg__);
  const auto& alphaD = to_ref(alphaD_arg__);
  const auto& alpha2 = to_ref(alpha2_arg__);
  const auto& geoDist = to_ref(geoDist_arg__);
  const auto& w_mat = to_ref(w_mat_arg__);
  const auto& nugget = to_ref(nugget_arg__);
  const auto& phi = to_ref(phi_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 60;
    validate_non_negative_index("parCov", "N", N);
    current_statement__ = 61;
    validate_non_negative_index("parCov", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> parCov;
    parCov = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(parCov, DUMMY_VAR__);
    
    current_statement__ = 63;
    validate_non_negative_index("Nug_mat", "N", N);
    current_statement__ = 64;
    validate_non_negative_index("Nug_mat", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> Nug_mat;
    Nug_mat = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(Nug_mat, DUMMY_VAR__);
    
    current_statement__ = 66;
    assign(parCov, nil_index_list(), rep_matrix(0, N, N),
      "assigning variable parCov");
    current_statement__ = 67;
    assign(Nug_mat, nil_index_list(), diag_matrix(nugget),
      "assigning variable Nug_mat");
    current_statement__ = 70;
    for (int k = 1; k <= K; ++k) {
      current_statement__ = 68;
      assign(parCov, nil_index_list(),
        add(stan::model::deep_copy(parCov),
          elt_multiply(
            tcrossprod(
              to_matrix(
                rvalue(w_mat,
                  cons_list(index_omni(),
                    cons_list(index_uni(k), nil_index_list())), "w_mat"))),
            spCov(N, alpha0[(k - 1)], alphaD[(k - 1)], alpha2[(k - 1)],
              geoDist, phi[(k - 1)], pstream__))),
        "assigning variable parCov");}
    current_statement__ = 71;
    assign(parCov, nil_index_list(),
      add(stan::model::deep_copy(parCov), add(gamma, Nug_mat)),
      "assigning variable parCov");
    current_statement__ = 72;
    return parCov;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct admixed_covariance_functor__ {
template <typename T2__, typename T3__, typename T4__, typename T5__,
typename T6__, typename T7__, typename T8__, typename T9__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::value_type_t<T5__>,
stan::value_type_t<T6__>, stan::promote_args_t<stan::value_type_t<T7__>,
stan::value_type_t<T8__>,
T9__>>, -1, -1>
operator()(const int& N, const int& K, const T2__& alpha0,
           const T3__& alphaD, const T4__& alpha2, const T5__& geoDist,
           const T6__& w_mat, const T7__& nugget, const T8__& phi,
           const T9__& gamma, std::ostream* pstream__)  const 
{
return admixed_covariance(N, K, alpha0, alphaD, alpha2, geoDist, w_mat,
         nugget, phi, gamma, pstream__);
}
};
template <typename T2__>
Eigen::Matrix<stan::promote_args_t<T2__>, -1, -1>
make_w_matrix(const int& N, const int& K,
              const std::vector<Eigen::Matrix<T2__, -1, 1>>& w,
              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 74;
    validate_non_negative_index("w_mat", "N", N);
    current_statement__ = 75;
    validate_non_negative_index("w_mat", "K", K);
    Eigen::Matrix<local_scalar_t__, -1, -1> w_mat;
    w_mat = Eigen::Matrix<local_scalar_t__, -1, -1>(N, K);
    stan::math::fill(w_mat, DUMMY_VAR__);
    
    current_statement__ = 79;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 77;
      assign(w_mat, cons_list(index_uni(i), nil_index_list()),
        to_row_vector(w[(i - 1)]), "assigning variable w_mat");}
    current_statement__ = 80;
    return w_mat;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct make_w_matrix_functor__ {
template <typename T2__>
Eigen::Matrix<stan::promote_args_t<T2__>, -1, -1>
operator()(const int& N, const int& K,
           const std::vector<Eigen::Matrix<T2__, -1, 1>>& w,
           std::ostream* pstream__)  const 
{
return make_w_matrix(N, K, w, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_space_multiK final : public model_base_crtp<model_space_multiK> {
private:
  int K;
  int N;
  int L;
  Eigen::Matrix<double, -1, -1> obsCov;
  Eigen::Matrix<double, -1, -1> geoDist;
  double varMeanFreqs;
  Eigen::Matrix<double, -1, -1> LobsCov;
  Eigen::Matrix<double, -1, 1> dirConPar;
 
public:
  ~model_space_multiK() { }
  
  inline std::string model_name() const final { return "model_space_multiK"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_space_multiK(stan::io::var_context& context__,
                     unsigned int random_seed__ = 0,
                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_space_multiK_namespace::model_space_multiK";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 21;
      context__.validate_dims("data initialization","K","int",
          context__.to_vec());
      K = std::numeric_limits<int>::min();
      
      current_statement__ = 21;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 21;
      current_statement__ = 21;
      check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 22;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 22;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 22;
      current_statement__ = 22;
      check_greater_or_equal(function__, "N", N, 2);
      current_statement__ = 23;
      context__.validate_dims("data initialization","L","int",
          context__.to_vec());
      L = std::numeric_limits<int>::min();
      
      current_statement__ = 23;
      L = context__.vals_i("L")[(1 - 1)];
      current_statement__ = 23;
      current_statement__ = 23;
      check_greater_or_equal(function__, "L", L, (N + 1));
      current_statement__ = 24;
      validate_non_negative_index("obsCov", "N", N);
      current_statement__ = 25;
      validate_non_negative_index("obsCov", "N", N);
      current_statement__ = 26;
      context__.validate_dims("data initialization","obsCov","double",
          context__.to_vec(N, N));
      obsCov = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(obsCov, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> obsCov_flat__;
        current_statement__ = 26;
        assign(obsCov_flat__, nil_index_list(), context__.vals_r("obsCov"),
          "assigning variable obsCov_flat__");
        current_statement__ = 26;
        pos__ = 1;
        current_statement__ = 26;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 26;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 26;
            assign(obsCov,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              obsCov_flat__[(pos__ - 1)], "assigning variable obsCov");
            current_statement__ = 26;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 27;
      validate_non_negative_index("geoDist", "N", N);
      current_statement__ = 28;
      validate_non_negative_index("geoDist", "N", N);
      current_statement__ = 29;
      context__.validate_dims("data initialization","geoDist","double",
          context__.to_vec(N, N));
      geoDist = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(geoDist, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> geoDist_flat__;
        current_statement__ = 29;
        assign(geoDist_flat__, nil_index_list(), context__.vals_r("geoDist"),
          "assigning variable geoDist_flat__");
        current_statement__ = 29;
        pos__ = 1;
        current_statement__ = 29;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 29;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 29;
            assign(geoDist,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              geoDist_flat__[(pos__ - 1)], "assigning variable geoDist");
            current_statement__ = 29;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 30;
      context__.validate_dims("data initialization","varMeanFreqs","double",
          context__.to_vec());
      varMeanFreqs = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 30;
      varMeanFreqs = context__.vals_r("varMeanFreqs")[(1 - 1)];
      current_statement__ = 31;
      validate_non_negative_index("LobsCov", "N", N);
      current_statement__ = 32;
      validate_non_negative_index("LobsCov", "N", N);
      current_statement__ = 33;
      LobsCov = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(LobsCov, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 34;
      validate_non_negative_index("dirConPar", "K", K);
      current_statement__ = 35;
      dirConPar = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(dirConPar, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 36;
      assign(LobsCov, nil_index_list(), multiply(L, obsCov),
        "assigning variable LobsCov");
      current_statement__ = 37;
      assign(dirConPar, nil_index_list(), rep_vector(0.1, K),
        "assigning variable dirConPar");
      current_statement__ = 38;
      validate_non_negative_index("alpha0", "K", K);
      current_statement__ = 39;
      validate_non_negative_index("alphaD", "K", K);
      current_statement__ = 40;
      validate_non_negative_index("alpha2", "K", K);
      current_statement__ = 41;
      validate_non_negative_index("phi", "K", K);
      current_statement__ = 42;
      validate_non_negative_index("nugget", "N", N);
      current_statement__ = 43;
      validate_non_negative_index("w", "N", N);
      current_statement__ = 44;
      validate_positive_index("w", "K", K);
      current_statement__ = 45;
      validate_non_negative_index("parCov", "N", N);
      current_statement__ = 46;
      validate_non_negative_index("parCov", "N", N);
      current_statement__ = 47;
      validate_non_negative_index("w_mat", "N", N);
      current_statement__ = 48;
      validate_non_negative_index("w_mat", "K", K);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += K;
      num_params_r__ += K;
      num_params_r__ += K;
      num_params_r__ += K;
      num_params_r__ += N;
      num_params_r__ += N * (K - 1);
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_space_multiK_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha0;
      alpha0 = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(alpha0, DUMMY_VAR__);
      
      current_statement__ = 1;
      alpha0 = in__.vector(K);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(alpha0, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha0[(sym1__ - 1)], 0, lp__),
            "assigning variable alpha0");
        } else {
          current_statement__ = 1;
          assign(alpha0, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha0[(sym1__ - 1)], 0),
            "assigning variable alpha0");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> alphaD;
      alphaD = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(alphaD, DUMMY_VAR__);
      
      current_statement__ = 2;
      alphaD = in__.vector(K);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(alphaD, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alphaD[(sym1__ - 1)], 0, lp__),
            "assigning variable alphaD");
        } else {
          current_statement__ = 2;
          assign(alphaD, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alphaD[(sym1__ - 1)], 0),
            "assigning variable alphaD");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha2;
      alpha2 = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(alpha2, DUMMY_VAR__);
      
      current_statement__ = 3;
      alpha2 = in__.vector(K);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(alpha2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(alpha2[(sym1__ - 1)], 0, 2, lp__),
            "assigning variable alpha2");
        } else {
          current_statement__ = 3;
          assign(alpha2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(alpha2[(sym1__ - 1)], 0, 2),
            "assigning variable alpha2");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> phi;
      phi = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(phi, DUMMY_VAR__);
      
      current_statement__ = 4;
      phi = in__.vector(K);
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        assign(phi, nil_index_list(),
          stan::math::positive_ordered_constrain(phi, lp__),
          "assigning variable phi");
      } else {
        current_statement__ = 4;
        assign(phi, nil_index_list(),
          stan::math::positive_ordered_constrain(phi),
          "assigning variable phi");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> nugget;
      nugget = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(nugget, DUMMY_VAR__);
      
      current_statement__ = 5;
      nugget = in__.vector(N);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(nugget, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(nugget[(sym1__ - 1)], 0, lp__),
            "assigning variable nugget");
        } else {
          current_statement__ = 5;
          assign(nugget, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(nugget[(sym1__ - 1)], 0),
            "assigning variable nugget");
        }}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> w;
      w = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(K));
      stan::math::fill(w, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> w_in__;
      w_in__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(
        (K - 1)));
      stan::math::fill(w_in__, DUMMY_VAR__);
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 6;
        assign(w_in__, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector((K - 1)), "assigning variable w_in__");}
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 6;
        if (jacobian__) {
          current_statement__ = 6;
          assign(w, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::simplex_constrain(w_in__[(sym1__ - 1)], lp__),
            "assigning variable w");
        } else {
          current_statement__ = 6;
          assign(w, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::simplex_constrain(w_in__[(sym1__ - 1)]),
            "assigning variable w");
        }}
      local_scalar_t__ gamma;
      gamma = DUMMY_VAR__;
      
      current_statement__ = 7;
      gamma = in__.scalar();
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        gamma = stan::math::lb_constrain(gamma, 0, lp__);
      } else {
        current_statement__ = 7;
        gamma = stan::math::lb_constrain(gamma, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, -1> parCov;
      parCov = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
      stan::math::fill(parCov, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> w_mat;
      w_mat = Eigen::Matrix<local_scalar_t__, -1, -1>(N, K);
      stan::math::fill(w_mat, DUMMY_VAR__);
      
      current_statement__ = 10;
      assign(w_mat, nil_index_list(), make_w_matrix(N, K, w, pstream__),
        "assigning variable w_mat");
      current_statement__ = 11;
      assign(parCov, nil_index_list(),
        admixed_covariance(N, K, alpha0, alphaD, alpha2, geoDist, w_mat,
          nugget, phi, gamma, pstream__), "assigning variable parCov");
      {
        current_statement__ = 12;
        lp_accum__.add(normal_lpdf<propto__>(alpha0, 0, 1));
        current_statement__ = 13;
        lp_accum__.add(normal_lpdf<propto__>(alphaD, 0, 1));
        current_statement__ = 14;
        lp_accum__.add(uniform_lpdf<propto__>(alpha2, 0, 2));
        current_statement__ = 15;
        lp_accum__.add(normal_lpdf<propto__>(nugget, 0, 1));
        current_statement__ = 16;
        lp_accum__.add(normal_lpdf<propto__>(phi, 0, 1));
        current_statement__ = 17;
        lp_accum__.add(normal_lpdf<propto__>(gamma, varMeanFreqs, 0.5));
        current_statement__ = 19;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 18;
          lp_accum__.add(dirichlet_lpdf<propto__>(w[(i - 1)], dirConPar));}
        current_statement__ = 20;
        lp_accum__.add(wishart_lpdf<propto__>(LobsCov, L, parCov));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_space_multiK_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> alpha0;
      alpha0 = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(alpha0, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      alpha0 = in__.vector(K);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 1;
        assign(alpha0, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(alpha0[(sym1__ - 1)], 0),
          "assigning variable alpha0");}
      Eigen::Matrix<double, -1, 1> alphaD;
      alphaD = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(alphaD, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      alphaD = in__.vector(K);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 2;
        assign(alphaD, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(alphaD[(sym1__ - 1)], 0),
          "assigning variable alphaD");}
      Eigen::Matrix<double, -1, 1> alpha2;
      alpha2 = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(alpha2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      alpha2 = in__.vector(K);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 3;
        assign(alpha2, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(alpha2[(sym1__ - 1)], 0, 2),
          "assigning variable alpha2");}
      Eigen::Matrix<double, -1, 1> phi;
      phi = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(phi, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      phi = in__.vector(K);
      current_statement__ = 4;
      assign(phi, nil_index_list(),
        stan::math::positive_ordered_constrain(phi), "assigning variable phi");
      Eigen::Matrix<double, -1, 1> nugget;
      nugget = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(nugget, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      nugget = in__.vector(N);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 5;
        assign(nugget, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(nugget[(sym1__ - 1)], 0),
          "assigning variable nugget");}
      std::vector<Eigen::Matrix<double, -1, 1>> w;
      w = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(K));
      stan::math::fill(w, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> w_in__;
      w_in__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(
        (K - 1)));
      stan::math::fill(w_in__, DUMMY_VAR__);
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 6;
        assign(w_in__, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector((K - 1)), "assigning variable w_in__");}
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 6;
        assign(w, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::simplex_constrain(w_in__[(sym1__ - 1)]),
          "assigning variable w");}
      double gamma;
      gamma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      gamma = in__.scalar();
      current_statement__ = 7;
      gamma = stan::math::lb_constrain(gamma, 0);
      Eigen::Matrix<double, -1, -1> parCov;
      parCov = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(parCov, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> w_mat;
      w_mat = Eigen::Matrix<double, -1, -1>(N, K);
      stan::math::fill(w_mat, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(alpha0[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(alphaD[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(alpha2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(phi[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(nugget[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(w[(sym2__ - 1)][(sym1__ - 1)]);}}
      vars__.emplace_back(gamma);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 10;
      assign(w_mat, nil_index_list(), make_w_matrix(N, K, w, pstream__),
        "assigning variable w_mat");
      current_statement__ = 11;
      assign(parCov, nil_index_list(),
        admixed_covariance(N, K, alpha0, alphaD, alpha2, geoDist, w_mat,
          nugget, phi, gamma, pstream__), "assigning variable parCov");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(
              rvalue(parCov,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "parCov"));
          }}
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(
              rvalue(w_mat,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "w_mat"));
          }}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> alpha0;
      alpha0 = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(alpha0, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha0_flat__;
        current_statement__ = 1;
        assign(alpha0_flat__, nil_index_list(), context__.vals_r("alpha0"),
          "assigning variable alpha0_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 1;
          assign(alpha0, cons_list(index_uni(sym1__), nil_index_list()),
            alpha0_flat__[(pos__ - 1)], "assigning variable alpha0");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> alpha0_free__;
      alpha0_free__ = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(alpha0_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 1;
        assign(alpha0_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(alpha0[(sym1__ - 1)], 0),
          "assigning variable alpha0_free__");}
      Eigen::Matrix<double, -1, 1> alphaD;
      alphaD = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(alphaD, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alphaD_flat__;
        current_statement__ = 2;
        assign(alphaD_flat__, nil_index_list(), context__.vals_r("alphaD"),
          "assigning variable alphaD_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 2;
          assign(alphaD, cons_list(index_uni(sym1__), nil_index_list()),
            alphaD_flat__[(pos__ - 1)], "assigning variable alphaD");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> alphaD_free__;
      alphaD_free__ = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(alphaD_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 2;
        assign(alphaD_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(alphaD[(sym1__ - 1)], 0),
          "assigning variable alphaD_free__");}
      Eigen::Matrix<double, -1, 1> alpha2;
      alpha2 = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(alpha2, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha2_flat__;
        current_statement__ = 3;
        assign(alpha2_flat__, nil_index_list(), context__.vals_r("alpha2"),
          "assigning variable alpha2_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 3;
          assign(alpha2, cons_list(index_uni(sym1__), nil_index_list()),
            alpha2_flat__[(pos__ - 1)], "assigning variable alpha2");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> alpha2_free__;
      alpha2_free__ = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(alpha2_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 3;
        assign(alpha2_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(alpha2[(sym1__ - 1)], 0, 2),
          "assigning variable alpha2_free__");}
      Eigen::Matrix<double, -1, 1> phi;
      phi = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(phi, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> phi_flat__;
        current_statement__ = 4;
        assign(phi_flat__, nil_index_list(), context__.vals_r("phi"),
          "assigning variable phi_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 4;
          assign(phi, cons_list(index_uni(sym1__), nil_index_list()),
            phi_flat__[(pos__ - 1)], "assigning variable phi");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> phi_free__;
      phi_free__ = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(phi_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(phi_free__, nil_index_list(),
        stan::math::positive_ordered_free(phi),
        "assigning variable phi_free__");
      Eigen::Matrix<double, -1, 1> nugget;
      nugget = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(nugget, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> nugget_flat__;
        current_statement__ = 5;
        assign(nugget_flat__, nil_index_list(), context__.vals_r("nugget"),
          "assigning variable nugget_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 5;
          assign(nugget, cons_list(index_uni(sym1__), nil_index_list()),
            nugget_flat__[(pos__ - 1)], "assigning variable nugget");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> nugget_free__;
      nugget_free__ = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(nugget_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 5;
        assign(nugget_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(nugget[(sym1__ - 1)], 0),
          "assigning variable nugget_free__");}
      std::vector<Eigen::Matrix<double, -1, 1>> w;
      w = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(K));
      stan::math::fill(w, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> w_flat__;
        current_statement__ = 6;
        assign(w_flat__, nil_index_list(), context__.vals_r("w"),
          "assigning variable w_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 6;
            assign(w,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              w_flat__[(pos__ - 1)], "assigning variable w");
            current_statement__ = 6;
            pos__ = (pos__ + 1);}}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> w_free__;
      w_free__ = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(
        (K - 1)));
      stan::math::fill(w_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 6;
        assign(w_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::simplex_free(w[(sym1__ - 1)]),
          "assigning variable w_free__");}
      double gamma;
      gamma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      gamma = context__.vals_r("gamma")[(1 - 1)];
      double gamma_free__;
      gamma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      gamma_free__ = stan::math::lb_free(gamma, 0);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(alpha0_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(alphaD_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(alpha2_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(phi_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(nugget_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= (K - 1); ++sym2__) {
          vars__.emplace_back(w_free__[(sym1__ - 1)][(sym2__ - 1)]);}}
      vars__.emplace_back(gamma_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("alpha0");
    names__.emplace_back("alphaD");
    names__.emplace_back("alpha2");
    names__.emplace_back("phi");
    names__.emplace_back("nugget");
    names__.emplace_back("w");
    names__.emplace_back("gamma");
    names__.emplace_back("parCov");
    names__.emplace_back("w_mat");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(K)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha0" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alphaD" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nugget" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "w" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    param_names__.emplace_back(std::string() + "gamma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "parCov" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "w_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha0" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alphaD" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nugget" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= (K - 1); ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "w" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    param_names__.emplace_back(std::string() + "gamma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "parCov" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "w_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha0\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"alphaD\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"alpha2\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"nugget\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << K << "}},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"parCov\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"w_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << K << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha0\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"alphaD\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"alpha2\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"nugget\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << (K - 1) << "}},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"parCov\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"w_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << K << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_space_multiK_namespace::model_space_multiK;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_space_multiK_namespace::profiles__;
}
#endif
#endif
